networks:
  rag_network:
    driver: bridge

volumes:
  qdrant_data:
  redis_data:
  rabbitmq_data:
  redisinsight_data:

services:
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    networks:
      - rag_network
    volumes:
      - qdrant_data:/qdrant/storage

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - rag_network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    ports:
      - "8001:5540"
    networks:
      - rag_network
    volumes:
      - redisinsight_data:/db
    environment:
      - REDIS_HOST=redis
    depends_on:
      redis:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - rag_network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  api:
    build:
      context: ./app
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
    environment:
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
    networks:
      - rag_network
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    volumes:
      - ./worker:/worker
    environment:
      - QDRANT_HOST=qdrant
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
    networks:
      - rag_network
    depends_on:
      qdrant:
        condition: service_started
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  ingest:
    build:
      context: ./ingest
      dockerfile: Dockerfile
    environment:
      - QDRANT_HOST=qdrant
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
      - FORCE_REINGEST=${FORCE_REINGEST:-false}
    networks:
      - rag_network
    depends_on:
      qdrant:
        condition: service_started
    restart: "no"
    profiles:
      - ingest
      - full
